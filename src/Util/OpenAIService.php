<?php

namespace MyRest\Util;

use GuzzleHttp\Client;
use GuzzleHttp\Exception\GuzzleException;
use Dotenv\Dotenv;

class OpenAIService
{
    private string $apiKey;
    private Client $httpClient;

    public function __construct()
    {
        $dotenv = Dotenv::createImmutable(__DIR__ . '/../../');
        $dotenv->load();
        $this->apiKey = $_ENV['OPENAI_API_KEY'] ?: '';
        $this->httpClient = new Client([
            'base_uri' => 'https://api.openai.com/v1/',
        ]);
    }

    /**
     * Returns the API key used for OpenAI calls.
     *
     * @return string
     */
    public function getApiKey(): string
    {
        return $this->apiKey;
    }

    /**
     * Get the instructions to be sent to the GPT-4 model.
     *
     * @return string The response generated by OpenAI or an error message.
     */
    private function getInstructions(): string
    {
        return "Você é um assistente especializado e deve responder apenas com base no contexto fornecido. 
            Sua resposta deve ser clara, concisa e não ultrapassar 500 tokens. 
            Se a pergunta não estiver relacionada ao contexto, responda educadamente que não sabe ou que não 
            tem informações sobre o assunto.";
    }

    /**
     * Send a question to the GPT-4 model, providing context based on a Markdown file.
     *
     * @param string $question The question to send to OpenAI.
     * @param string $fileName The name of the Markdown file (without extension) that contains the context.
     * @return string The response generated by OpenAI or an error message.
     */
    public function askGPT(string $question, string $fileName): string
    {
        $filePath = __DIR__ . "/../../docs/$fileName.md";
        if (!file_exists($filePath)) {
            return "Erro: O arquivo '$fileName.md' não foi encontrado.";
        }

        $context = file_get_contents($filePath);
        if (empty(trim($context))) {
            return "Erro: O arquivo '$fileName.md' está vazio.";
        }

        $payload = [
            'model' => 'gpt-4-turbo',
            'messages' => [
                ['role' => 'system', 'content' => $this->getInstructions()],
                ['role' => 'user', 'content' => "Contexto:\n" . $context . "\n\nPergunta: " . $question]
            ],
            'temperature' => 0.7,
            'max_tokens' => 500
        ];

        try {
            $response = $this->httpClient->post('chat/completions', [
                'headers' => [
                    'Authorization' => "Bearer {$this->apiKey}",
                    'Content-Type'  => 'application/json',
                ],
                'json' => $payload
            ]);

            $data = json_decode($response->getBody()->getContents(), true);
            return $data['choices'][0]['message']['content'] ?? "Erro ao gerar resposta.";
        } catch (GuzzleException $e) {
            return "Erro na comunicação com a OpenAI: " . $e->getMessage();
        }
    }
}
